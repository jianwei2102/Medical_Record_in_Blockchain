
package UIUX;

import Classes.Patient;
import Classes.BloodTest;
import Classes.Doctor;
import Classes.HealthRecord;
import Classes.Hospitalization;
import Classes.MedicalHistory;
import Classes.MedicalInformation;
import Classes.UrineTest;
import Classes.Vaccination;
import Classes.VitalSign;
import DataIO.BlockIO;
import java.util.ArrayList;
import DataIO.HealthRecordIO;
import bcd.BCD;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.Date;
import java.util.concurrent.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import static DataIO.DataIO.allPermission;
import static DataIO.DataIO.allDoctor;

public class Permission extends javax.swing.JFrame {
    
    public Permission() {
        initComponents();
    }
    
    public void loadPermission() {
        DefaultTableModel permissionDisplay = (DefaultTableModel)permissionTable.getModel(); // Get the model of the table
        permissionDisplay.setRowCount(0); // Set rows to 0
        
        for (Doctor d : allDoctor) {
            String doctorID = d.getDoctorID();
            String name = d.getName();
            String hospital = d.getHospitalName();
            String address = d.getHospitalAddress();
            String department = d.getDepartment();
            String status;
            
            if (DataIO.PermissionIO.checkPermission(BCD.loginPatient.getPatientID(), doctorID)) {
                status = "Granted";
            } else {
               status = "Revoked";
            }
            
            Object[] carData = {
                doctorID,
                name,
                hospital,
                address,
                department,
                status
            };
            
            permissionDisplay.addRow(carData); // Add created object into table row
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        HealthRecordLabel = new javax.swing.JLabel();
        BackButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        permissionTable = new javax.swing.JTable();
        HealthRecordLabel1 = new javax.swing.JLabel();
        doctorIDTextField = new javax.swing.JTextField();
        addPermissionButton = new javax.swing.JButton();
        revokePermissionButton = new javax.swing.JButton();
        HealthRecordLabel2 = new javax.swing.JLabel();
        searchTextField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        HealthRecordLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        HealthRecordLabel.setText("Manage Permission");

        BackButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        BackButton.setText("Back");
        BackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackButtonActionPerformed(evt);
            }
        });

        permissionTable.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        permissionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Doc ID", "Name", "Hospital", "Address", "Department", "Status"
            }
        ));
        permissionTable.setRowHeight(30);
        permissionTable.setSelectionBackground(new java.awt.Color(102, 252, 241));
        permissionTable.setSelectionForeground(new java.awt.Color(31, 40, 51));
        permissionTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                permissionTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(permissionTable);
        if (permissionTable.getColumnModel().getColumnCount() > 0) {
            permissionTable.getColumnModel().getColumn(3).setResizable(false);
        }

        HealthRecordLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        HealthRecordLabel1.setText("Search by Name");

        doctorIDTextField.setEditable(false);

        addPermissionButton.setText("Add Permission");
        addPermissionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPermissionButtonActionPerformed(evt);
            }
        });

        revokePermissionButton.setText("Revoke Permission");
        revokePermissionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                revokePermissionButtonActionPerformed(evt);
            }
        });

        HealthRecordLabel2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        HealthRecordLabel2.setText("Selected Doctor ID");

        searchTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                searchTextFieldKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 591, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(doctorIDTextField)
                                .addComponent(addPermissionButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(revokePermissionButton, javax.swing.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE))
                            .addComponent(HealthRecordLabel1)
                            .addComponent(HealthRecordLabel2)
                            .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(HealthRecordLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 571, Short.MAX_VALUE)
                        .addComponent(BackButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(HealthRecordLabel)
                    .addComponent(BackButton))
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(HealthRecordLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(HealthRecordLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(doctorIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(addPermissionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(revokePermissionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(54, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void BackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackButtonActionPerformed
        // TODO add your handling code here:
        PatientMenu patientMenu = new PatientMenu();
        patientMenu.setVisible(true);
        dispose();
    }//GEN-LAST:event_BackButtonActionPerformed

    private void permissionTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_permissionTableMouseClicked
        DefaultTableModel permissionTableModel = (DefaultTableModel)permissionTable.getModel(); // Get table model
        int rowInfo = permissionTable.convertRowIndexToModel(permissionTable.getSelectedRow()); // Get row number

        // Set text to respective inputs
        doctorIDTextField.setText(permissionTableModel.getValueAt(rowInfo, 0).toString());
    }//GEN-LAST:event_permissionTableMouseClicked

    private void addPermissionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPermissionButtonActionPerformed
        String patientID = BCD.loginPatient.getPatientID();
        String doctorID = doctorIDTextField.getText();
        
        if (doctorID.isEmpty() || doctorID == null) {
            JOptionPane.showMessageDialog(null, "Please select the doctor from the table first.", 
                        "Missing Value", JOptionPane.WARNING_MESSAGE);
                return;
        }
        
        if (!DataIO.PermissionIO.checkPermission(patientID, doctorID)) {
            DataIO.PermissionIO.addNewPermission(patientID, doctorID);
        } else {
            JOptionPane.showMessageDialog(null, "The permission for this doctor has been granted.", 
                        "Permission granted", JOptionPane.WARNING_MESSAGE);
                return;
        }
        
        JOptionPane.showMessageDialog(null, "New premission created successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
        loadPermission();
    }//GEN-LAST:event_addPermissionButtonActionPerformed

    private void revokePermissionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_revokePermissionButtonActionPerformed
        String patientID = BCD.loginPatient.getPatientID();
        String doctorID = doctorIDTextField.getText();
        
        if (doctorID.isEmpty() || doctorID == null) {
            JOptionPane.showMessageDialog(null, "Please select the doctor from the table first.", 
                        "Missing Value", JOptionPane.WARNING_MESSAGE);
                return;
        }
        
        if (DataIO.PermissionIO.checkPermission(patientID, doctorID)) {
            DataIO.PermissionIO.removePermission(patientID, doctorID);
        } else {
            JOptionPane.showMessageDialog(null, "The permission for this doctor has been granted.", 
                        "Permission granted", JOptionPane.WARNING_MESSAGE);
                return;
        }
        
        JOptionPane.showMessageDialog(null, "Existing premission revoked successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
        loadPermission();
    }//GEN-LAST:event_revokePermissionButtonActionPerformed

    private void searchTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchTextFieldKeyPressed
        // TODO add your handling code here:
        DataIO.DataIO.tableSearchId(permissionTable, searchTextField.getText(), 1);
    }//GEN-LAST:event_searchTextFieldKeyPressed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
    permissionTable.setModel(new DefaultTableModel(null, 
             new Object[]{"Doctor ID","Name", "Hospital", "address", "Department", "Status"}){
        @Override // Make sure rows can be selected, but not edited
        public boolean isCellEditable(int row, int column) {
           //all cells false
           return false;
        }        
    }); 

    loadPermission();
    }//GEN-LAST:event_formComponentShown

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Permission.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Permission.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Permission.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Permission.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Permission().setVisible(true);
                } catch (Exception ex) {
                    System.out.println("Unable to add record ..");
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BackButton;
    private javax.swing.JLabel HealthRecordLabel;
    private javax.swing.JLabel HealthRecordLabel1;
    private javax.swing.JLabel HealthRecordLabel2;
    private javax.swing.JButton addPermissionButton;
    private javax.swing.JTextField doctorIDTextField;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable permissionTable;
    private javax.swing.JButton revokePermissionButton;
    private javax.swing.JTextField searchTextField;
    // End of variables declaration//GEN-END:variables
}
