
package UIUX;

import bcd.BCD;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import static DataIO.BlockIO.allVerification;
import DataIO.HealthRecordIO;
import blockchain.Verification;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

public class VerifyTransaction extends javax.swing.JFrame {
    
    private HealthRecordIO hrIO;
    
    public VerifyTransaction() throws Exception {
        initComponents();
        hrIO = HealthRecordIO.getInstance();
    }
    
    public void loadTransaction() {
        DefaultTableModel permissionDisplay = (DefaultTableModel)TransactionTable.getModel(); // Get the model of the table
        permissionDisplay.setRowCount(0); // Set rows to 0
        
        for (Verification v : allVerification) {
            String index = v.getIndex();
            String blockHash = v.getBlockHash();
            String patientID = v.getPatientID();
            String encrypted = v.getEncryptedHealthRecord();
            String signature = v.getSignatureMessage();
            String doctorID = v.getDoctorID();
            
            Object[] carData = {
                index,
                blockHash,
                patientID,
                encrypted,
                signature,
                doctorID
            };
            
            permissionDisplay.addRow(carData); // Add created object into table row
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        HealthRecordLabel = new javax.swing.JLabel();
        BackButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TransactionTable = new javax.swing.JTable();
        HealthRecordLabel1 = new javax.swing.JLabel();
        blockTextField = new javax.swing.JTextField();
        verifyTransactionButton = new javax.swing.JButton();
        verifyAllTransactionButton = new javax.swing.JButton();
        HealthRecordLabel2 = new javax.swing.JLabel();
        searchTextField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        HealthRecordLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        HealthRecordLabel.setText("Verify Transaction");

        BackButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        BackButton.setText("Back");
        BackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackButtonActionPerformed(evt);
            }
        });

        TransactionTable.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        TransactionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Index", "Block Hash", "PatientID", "Encrypted", "Signature", "By DoctorID"
            }
        ));
        TransactionTable.setRowHeight(30);
        TransactionTable.setSelectionBackground(new java.awt.Color(102, 252, 241));
        TransactionTable.setSelectionForeground(new java.awt.Color(31, 40, 51));
        TransactionTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TransactionTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TransactionTable);
        if (TransactionTable.getColumnModel().getColumnCount() > 0) {
            TransactionTable.getColumnModel().getColumn(4).setResizable(false);
        }

        HealthRecordLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        HealthRecordLabel1.setText("Search by PatientID");

        blockTextField.setEditable(false);

        verifyTransactionButton.setText("Verify Transaction");
        verifyTransactionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verifyTransactionButtonActionPerformed(evt);
            }
        });

        verifyAllTransactionButton.setText("Verify All Transaction");
        verifyAllTransactionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verifyAllTransactionButtonActionPerformed(evt);
            }
        });

        HealthRecordLabel2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        HealthRecordLabel2.setText("Selected Block");

        searchTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTextFieldActionPerformed(evt);
            }
        });
        searchTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                searchTextFieldKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 591, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(blockTextField)
                                .addComponent(verifyTransactionButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(verifyAllTransactionButton, javax.swing.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE))
                            .addComponent(HealthRecordLabel1)
                            .addComponent(HealthRecordLabel2)
                            .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(HealthRecordLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 583, Short.MAX_VALUE)
                        .addComponent(BackButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(HealthRecordLabel)
                    .addComponent(BackButton))
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(HealthRecordLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(HealthRecordLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(blockTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(verifyTransactionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(verifyAllTransactionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(54, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void BackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackButtonActionPerformed
        // TODO add your handling code here:
        MedicalOfficerMenu medicalOfficerMenu = new MedicalOfficerMenu();
        medicalOfficerMenu.setVisible(true);
        dispose();
    }//GEN-LAST:event_BackButtonActionPerformed

    private void TransactionTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TransactionTableMouseClicked
        DefaultTableModel permissionTableModel = (DefaultTableModel)TransactionTable.getModel(); // Get table model
        int rowInfo = TransactionTable.convertRowIndexToModel(TransactionTable.getSelectedRow()); // Get row number

        // Set text to respective inputs
        blockTextField.setText(permissionTableModel.getValueAt(rowInfo, 0).toString());
    }//GEN-LAST:event_TransactionTableMouseClicked

    private void verifyTransactionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verifyTransactionButtonActionPerformed
        String blockIndex = blockTextField.getText();
        Verification verification = allVerification.get(Integer.parseInt(blockIndex)-1);
        
        try {
            if (hrIO.verifySignature(verification.getEncryptedHealthRecord(), verification.getSignatureMessage(), verification.getDoctorID())) {
                JOptionPane.showMessageDialog(null, "Verification Result: True", "Success", JOptionPane.INFORMATION_MESSAGE);
            }
            else {
                JOptionPane.showMessageDialog(null, "Verification Result: False", "Failed", JOptionPane.WARNING_MESSAGE);
            }
        } catch (Exception ex) {
            System.out.println("Unable to verify");
        }
    }//GEN-LAST:event_verifyTransactionButtonActionPerformed

    private void verifyAllTransactionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verifyAllTransactionButtonActionPerformed
        try {
            ArrayList<String> invalidTransaction = new ArrayList<>();
            String blockIndex = blockTextField.getText();
            for (Verification verification : allVerification) {
                if (!hrIO.verifySignature(verification.getEncryptedHealthRecord(), verification.getSignatureMessage(), verification.getDoctorID())) {
                    invalidTransaction.add(verification.getIndex());
                }
            }
            
            if (invalidTransaction.isEmpty() || invalidTransaction == null) {
                JOptionPane.showMessageDialog(null, "All Transaction in Blockchain is true", "Success", JOptionPane.INFORMATION_MESSAGE);
            } else {
                StringBuilder result = new StringBuilder();
                for (int i = 0; i < invalidTransaction.size(); i++ ){
                    result.append(invalidTransaction.get(i));
                    if(i < invalidTransaction.size() - 1) {
                        result.append(",");
                    }
                }
                JOptionPane.showMessageDialog(null, "Invalid Transaction Exists in the blockchain\n"+result, "Failed", JOptionPane.WARNING_MESSAGE);
            }
            
        } catch (Exception ex) {
            System.out.println("Unable to verify");
        }
    }//GEN-LAST:event_verifyAllTransactionButtonActionPerformed

    private void searchTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchTextFieldKeyPressed
        // TODO add your handling code here:
        DataIO.DataIO.tableSearchId(TransactionTable, searchTextField.getText(), 2);
    }//GEN-LAST:event_searchTextFieldKeyPressed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
    TransactionTable.setModel(new DefaultTableModel(null, 
             new Object[]{"Block Index","Block Hash","PatientID", "Encrypted", "Singature", "By DoctorID"}){
        @Override // Make sure rows can be selected, but not edited
        public boolean isCellEditable(int row, int column) {
           //all cells false
           return false;
        }        
    }); 

    loadTransaction();
    }//GEN-LAST:event_formComponentShown

    private void searchTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchTextFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VerifyTransaction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VerifyTransaction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VerifyTransaction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VerifyTransaction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new VerifyTransaction().setVisible(true);
                } catch (Exception ex) {
                    System.out.println("Unable to add record ..");
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BackButton;
    private javax.swing.JLabel HealthRecordLabel;
    private javax.swing.JLabel HealthRecordLabel1;
    private javax.swing.JLabel HealthRecordLabel2;
    private javax.swing.JTable TransactionTable;
    private javax.swing.JTextField blockTextField;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField searchTextField;
    private javax.swing.JButton verifyAllTransactionButton;
    private javax.swing.JButton verifyTransactionButton;
    // End of variables declaration//GEN-END:variables
}
